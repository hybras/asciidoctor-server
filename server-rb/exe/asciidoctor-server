#!/usr/bin/env ruby

require "asciidoctor-server"
require "asciidoctor-server/cli"

require "asciidoctor"
require "logger"
require "grpc"

module Asciidoctor::Server::Logging
  LOGGER = Logger.new $stderr, level: Logger::INFO
  def logger
    LOGGER
  end
end

# Define a gRPC module-level logger method before grpc/logconfig.rb loads.
module GRPC
  extend Asciidoctor::Server::Logging
end

def main
  options = ::Asciidoctor::Server::Cli::Options.parse(ARGV)
  s = GRPC::RpcServer.new pool_size: options.thread_pool_size
  s.add_http2_port(options.address, :this_port_is_insecure)
  s.handle(Asciidoctor::Server::AsciidoctorServer)
  # Runs the server with SIGHUP, SIGINT and SIGTERM signal handlers to
  #   gracefully shutdown.
  # User could also choose to run server via call to run_till_terminated
  s.run_till_terminated_or_interrupted([1, 'int', 'SIGTERM'])
end

main