#!/usr/bin/env ruby

require "asciidoctor-server"

require "asciidoctor"
require "logger"
require "grpc"
require "optparse"

module MyLogger
  LOGGER = Logger.new $stderr, level: Logger::INFO
  def logger
    LOGGER
  end
end

# Define a gRPC module-level logger method before grpc/logconfig.rb loads.
module GRPC
  extend MyLogger
end

def main
  options = {
    :threads => GRPC::RpcServer::DEFAULT_POOL_SIZE,
    :address => "unix://#{Pathname.pwd / ".asciidoctor-server.sock"}"
  }
  p = OptionParser.new do |parser|
    parser.on("-addr ADDRESS", "--address ADDRESS") do |addr|
      options[:address] = addr
    end
    parser.on("-t SIZE", "--pool-size SIZE", "thread pool size") do  |size|
      options[:threads] = size
    end
  end.parse

  s = GRPC::RpcServer.new pool_size: options[:threads]
  s.add_http2_port(options[:address], :this_port_is_insecure)
  s.handle(Asciidoctor::Server::AsciidoctorServer)
  # Runs the server with SIGHUP, SIGINT and SIGTERM signal handlers to
  #   gracefully shutdown.
  # User could also choose to run server via call to run_till_terminated
  s.run_till_terminated_or_interrupted([1, 'int', 'SIGTERM'])
end

main