# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: asciidoctor.proto

require 'google/protobuf'


descriptor_data = "\n\x11\x61sciidoctor.proto\x12\x0b\x61sciidoctor\"w\n\x19\x41sciidoctorConvertRequest\x12\x12\n\nstandalone\x18\x05 \x01(\x08\x12\x12\n\nextensions\x18\x03 \x03(\t\x12\x0f\n\x07\x62\x61\x63kend\x18\x04 \x01(\t\x12\x12\n\nattributes\x18\x02 \x03(\t\x12\r\n\x05input\x18\x01 \x01(\t\")\n\x17\x41sciidoctorConvertReply\x12\x0e\n\x06output\x18\x01 \x01(\t2q\n\x14\x41sciidoctorConverter\x12Y\n\x07\x43onvert\x12&.asciidoctor.AsciidoctorConvertRequest\x1a$.asciidoctor.AsciidoctorConvertReply\"\x00\x42KZ3com.github/hybras/asciidoctor-server/client-go/grpc\xea\x02\x13\x41sciidoctor::Serverb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool

begin
  pool.add_serialized_file(descriptor_data)
rescue TypeError => e
  # Compatibility code: will be removed in the next major version.
  require 'google/protobuf/descriptor_pb'
  parsed = Google::Protobuf::FileDescriptorProto.decode(descriptor_data)
  parsed.clear_dependency
  serialized = parsed.class.encode(parsed)
  file = pool.add_serialized_file(serialized)
  warn "Warning: Protobuf detected an import path issue while loading generated file #{__FILE__}"
  imports = [
  ]
  imports.each do |type_name, expected_filename|
    import_file = pool.lookup(type_name).file_descriptor
    if import_file.name != expected_filename
      warn "- #{file.name} imports #{expected_filename}, but that import was loaded as #{import_file.name}"
    end
  end
  warn "Each proto file must use a consistent fully-qualified name."
  warn "This will become an error in the next major version."
end

module Asciidoctor
  module Server
    AsciidoctorConvertRequest = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("asciidoctor.AsciidoctorConvertRequest").msgclass
    AsciidoctorConvertReply = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("asciidoctor.AsciidoctorConvertReply").msgclass
  end
end
